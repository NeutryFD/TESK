# Default values for tesk.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# host_name: tes.tsi.ebi.ac.uk
host_name: "tesk.cromwell.local"
#
#
#

# 'openstack' or 's3'
storage: none

# Configurable storage class. 
storageClass: nfs-csi 

tesk:
    # if empty - default base path; currently /ga4gh/tes/v1
    #tes_api_base_path:
    # For backwards compatibility with TES 0.3 - old base bath
    tes_api_base_path: /ga4gh/tes/v1
    image: docker.io/elixircloud/tesk-api:1.1.0
    port: 8080
    taskmaster_image_name: docker.io/neutry/tesk-core-taskmaster
    taskmaster_image_version: "v1.14.1-bugfix"
    taskmaster_filer_image_name: docker.io/neutry/tesk-core-filer
    taskmaster_filer_image_version: v1.0.0-root
    debug: false
    executor_retries: 2
    filer_retries: 2

    limitsCpu: 1
    limitsMemory: 2048Mi
    requestsCpu: 1
    requestsMemory: 2048Mi

    securityContext:
      enabled: true

transfer:
    # Set transfer active to true to pass environment variables, but use direct mounting
    active: true

    # These paths are used for direct PVC mounting
    wes_base_path: '/data'                    # Host path (Cromwell side)
    tes_base_path: '/data'                    # Container path (Task side) - mount at /data
    pvc_name: 'pvc-cromwell'                  # Force all tasks to use the shared PVC

# Force storage settings for direct mounting
storageClass: 'nfs-csi'        # Use your existing storage class

auth:
    # the following variables are specific to each deployment
    # mode: auth/noauth
    mode: noauth
    # EBI/CSC
    env_subgroup: CSC
    env_basegroup: ECP_CLN

service:
    # the following variables are specific to each deployment
    # use:
    # - NodePort, if you want to expose API directly
    # - LoadBalancer for cloud provider (gcloud) or empty otherwise
    type: ClusterIP
    node_port: ""

ftp:
    # If you need FTP configuration, choose one of the 2 methods of providing credentials
    classic_ftp_secret: ftp-secret
    netrc_secret:
    #classic_ftp_secret:
    #netrc_secret: netrc-secret
    # If you install FTP locally, but outside of k8s and need a DNS entry for it (because your workflow manager might not like the IP address)
    # one way of getting a DNS entry for your FTP service is to use a k8s "service without a selector"
    # Put the IP under which your pods see see services running on your host (differs depending on the way you installes K8s)
    # For virtualBox, it is 192.168.99.1 and your ftp service will be visible under ftp name
    # You will be able to use it like this: ftp://ftp/file
    hostip:

ingress:
  rules: true
  ingressClassName: ""
  path: /
  # If no TLS secret name configured, TLS will be switched off
  tls_secret_name:
  # Annotations for Ingress Resource.
  annotations:
      kubernetes.io/tls-acme: "true"
      # Choose one of the following depending on your setup
      # cert-manager.io/issuer: letsencrypt-production
      cert-manager.io/cluster-issuer: letsencrypt-production
